索引
为了使查找速度更快，所以会对查询算法进行优化，比如二分，二叉树查找，但是这就要求了算法必须依据对应的数据结构
例如二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树上
，所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。
目前大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构
先来看看b树是什么
b树属于平衡多叉树，其特点为关键字递增次序排列，左小右大
1.子节点树>1,但是要<=M，M>=2 M就是代表几叉树，
2.关键字数小于等于M-1，且作为一个变种的平衡二叉树，他要求叶子节点都在同一层
3.叶子节点除了包含关键字和关键字指针，也有指向其子节点的指针，只不过地址都是null
b+树，本质上非叶子节点不存放父类指针，只作为索引。且非叶子个数就等于关键字个数，存放这所有的父类指针地址，所以要查询必须要到叶子节点中去并以从上到下的方式进行查找，且叶子节点的关键字为升序排列，左边的会保存右边的地址，每一组叶子就像链表一样，
携带着卫星数据。   //卫星数据就是索引元素指向的数据记录
所有优势在 单一节点储存了更多的元素，且查询只能到叶子节点去，并形成了有序链表，便于查询。
b-树：无论子节点还是叶子节点都有卫星数据 查询方式为自下往上


由于b-树的特点，所以与b+树进行比较时，由于b+的非叶子节点没有卫星数据，所以同样的磁盘页进行io时，可以容纳更多的元素，所以比起b-树，b+树更加矮胖，io次数也得以减少，有更好的效果
又由于叶子节点存放了父类指针的地址，查询要到这里来，所以b+查询很稳定，而b-就不一样了，因为最好在根节点找到，最坏在叶子节点找到所以，不稳定

那会回到刚刚的问题，由于索引庞大的数目，所以不肯能所有的索引都存放在内存里，所以索引大多是以索引文件的形式存放在磁盘当中，但是对应这种情况，为了查询就要进行io，所以减少io次数很重要
且评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度
根据上述所说，mysql选择了用b+

